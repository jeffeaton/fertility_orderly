?calendar_qaurter
?calendar_quarter
library(naomi)
calendar_quarter_labels(population$calendar_quarter)
?calendar_quarter_labels
population %>%
mutate(period = as.numeric(year_labels(calendar_quarter_to_quarter_id(calendar_quarter))))
library(tidyverse)
population %>%
mutate(period = as.numeric(year_labels(calendar_quarter_to_quarter_id(calendar_quarter))))
population <- population %>%
mutate(period = as.numeric(year_labels(calendar_quarter_to_quarter_id(calendar_quarter)))) %>%
select(-calendar_quarter)
orderly_pull_archive(moz_data_population)
orderly_pull_archive(zwe_data_population)
orderly_pull_archive("zwe_data_population")
orderly_pull_archive("zwe_data_areas")
iso3_c <- "ZWE"
population <- read.csv(paste0("depends/", tolower(iso3_c), "_population.csv"))
population <- read.csv("archive/zwe_data_population/20201103-131932-08512a09/zwe_population_nso.csv")
areas <- read_sf("archive/zwe_data_areas/20201103-094144-94388ee2/zwe_areas.geojson")
population <- population %>%
mutate(period = as.numeric(year_labels(calendar_quarter_to_quarter_id(calendar_quarter)))) %>%
select(-calendar_quarter)
asfr <- readRDS("~/Documents/GitHub/subnat_fertility/countries/ZWE/data/ZWE_asfr_admin2.rds")
mics_asfr readRDS("~/Documents/GitHub/subnat_fertility/countries/ZWE/data/ZWE_mics_admin1.rds.rds")
mics_asfr <- readRDS("~/Documents/GitHub/subnat_fertility/countries/ZWE/data/ZWE_mics_admin1.rds.rds")
mics_asfr <- readRDS("~/Documents/GitHub/subnat_fertility/countries/ZWE/data/ZWE_mics_admin1.rds")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr,
exclude_districts,
project=FALSE,
mics_flag = TRUE,
level = "naomi")
areas
spread_areas(areas)
devtools::load_all("~/Documents/GitHub/dfertility/")
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
debugonce(make_model_frames)
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
debugonce(make_model_frames)
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
debugonce(make_model_frames)
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
spread_areas(areas)
population
area_populations(population, spread_areas(areas))
View(population)
devtools::load_all("~/Documents/GitHub/dfertility/")
debugonce(area_populations)
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
left_join(areas_wide, population, by = c("area_id"))
library(parallel)
parallel::detectCores()
parallel::detectCores()/2
devtools::load_all("~/Documents/GitHub/dfertility/")
debugonce(area_populations)
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
View(area_populations)
devtools::load_all("~/Documents/GitHub/dfertility/")
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
devtools::load_all("~/Documents/GitHub/dfertility/")
d
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
debugonce(make_model_frames)
mf <- make_model_frames(population, asfr, mics_asfr, areas, project=2020)
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
debugonce(make_model_frames)
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
View(areas)
create_areas(areas)
create_areas(area_merged = areas)
foo <- create_areas(area_merged = areas)
create_area_aggregation(foo$area_id[foo$naomi_level], areas)
area_tree <- create_areas(area_merged = areas)
area_aggregation <- create_area_aggregation(areas$area_id[areas$naomi_level], area_tree)
View(area_aggregation)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
unique(area_aggregation$model_area_id)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
library(Matrix)
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
View(mf)
View(mf)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
debugonce(make_model_frames)
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
sparseMatrix(i = join_mics$idx_row, j=join_mics$idx, x=join_mics$x, dims = c(max(join_mics$idx_row), nrow(mf_model)), use.last.ij = TRUE)
View(mf)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
areas %>% st_drop_geometry()
areas %>% st_drop_geometry() %>% filter(naomi_level)
areas %>% filter(naomi_level)
areas %>% filter(naomi_level) %>% st_as_sf
sh <- areas %>%
filter(naomi_level) %>%
arrange(area_id) %>%
mutate(area_idx = row_number())
View(sh)
sh <- areas %>%
filter(naomi_level) %>%
arrange(area_sort_order) %>%
mutate(area_idx = row_number())
nb <- sh %>%
as("Spatial") %>%
spdep::poly2nb() %>%
`names<-`(sh$area_idx)
View(nb)
nb <- sh %>%
as("Spatial") %>%
spdep::poly2nb()
View(nb)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
library(sp)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
View(mf)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
View(mf)
sd <- seq(0.9, 1.1, 0.01)
x <- seq(-0.1, 0.1, 0.01)
Map(function(x, sd) {rnorm(1000, x, sd)}
df ÂºMap(function(x, sd) {rnorm(1000, x, sd)})
df <- Map(function(x, sd) {rnorm(1000, x, sd)})
rnorm(1000, 0.1, 0.9)
df <- Map(function(x, sd) {
rnorm(1000, x, sd)
})
View(df)
compile("resources/tmb.cpp")               # Compile the C++ file
library(TMB)
compile("resources/tmb.cpp")               # Compile the C++ file
compile("global/tmb.cpp")               # Compile the C++ file
View(mf)
unique(mf$mf_model$urban)
compile("global/tmb.cpp")               # Compile the C++ file
dyn.load(dynlib(here("global/tmb.cpp")))
dyn.load(dynlib("global/tmb.cpp"))
compile("global/tmb.cpp")               # Compile the C++ file
dyn.load(dynlib("global/tmb.cpp"))
dyn.load(dynlib("global/tmb"))
tmb_int <- list()
tmb_int$data <- list(M_obs = M_obs,
X_tips_dummy = mf$Z$X_tips_dummy,
X_urban_dummy = mf$Z$X_urban_dummy,
X_extract_dhs = mf$X_extract$X_extract_dhs,
X_extract_ais = mf$X_extract$X_extract_ais,
Z_tips = mf$Z$Z_tips,
Z_tips_dhs = mf$Z$Z_tips_dhs,
Z_age = mf$Z$Z_age,
Z_period = mf$Z$Z_period,
Z_spatial = mf$Z$Z_spatial,
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf$mf_model),
Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf$mf_model),
Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf$mf_model),
Z_country = mf$Z$Z_country,
Z_omega1 = sparse.model.matrix(~0 + id.omega1, mf$mf_model),
Z_omega2 = sparse.model.matrix(~0 + id.omega2, mf$mf_model),
R_tips = mf$R$R_tips,
R_age = mf$R$R_age,
R_period = mf$R$R_period,
R_spatial = mf$R$R_spatial,
R_country = mf$R$R_country,
rankdef_R_spatial = 1,
log_offset_dhs = log(filter(mf$district$obs, ais_dummy ==0)$pys),
births_obs_dhs = filter(mf$district$obs, ais_dummy ==0)$births,
log_offset_ais = log(filter(mf$district$obs, ais_dummy ==1)$pys),
births_obs_ais = filter(mf$district$obs, ais_dummy ==1)$births,
pop = mf$mf_model$population,
A_asfr_out = mf$out$A_asfr_out,
A_tfr_out = mf$out$A_tfr_out,
mics_toggle = mf$mics_toggle,
out_toggle = mf$out_toggle
)
tmb_int$par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# beta_urban_dummy = rep(0, ncol(X_urban_dummy)),
u_tips = rep(0, ncol(Z$Z_tips)),
log_prec_rw_tips = 0,
u_age = rep(0, ncol(Z$Z_age)),
log_prec_rw_age = 0,
u_country = rep(0, ncol(Z$Z_country)),
log_prec_country = 0,
omega1 = array(0, c(ncol(R$R_country), ncol(Z$Z_age))),
log_prec_omega1 = 0,
lag_logit_omega1_phi_age = 0,
omega2 = array(0, c(ncol(R$R_country), ncol(Z$Z_period))),
log_prec_omega2 = 0,
lag_logit_omega2_phi_period = 0,
u_period = rep(0, ncol(Z$Z_period)),
log_prec_rw_period = 0,
u_spatial_str = rep(0, ncol(Z$Z_spatial)),
log_prec_spatial = 0,
eta1 = array(0, c(ncol(Z$Z_country), ncol(Z$Z_period), ncol(Z$Z_age))),
log_prec_eta1 = 0,
lag_logit_eta1_phi_age = 0,
lag_logit_eta1_phi_period = 0,
#
eta2 = array(0, c(ncol(Z$Z_spatial), ncol(Z$Z_period))),
log_prec_eta2 = 0,
lag_logit_eta2_phi_period = 0,
#
eta3 = array(0, c(ncol(Z$Z_spatial), ncol(Z$Z_age))),
log_prec_eta3 = 0,
lag_logit_eta3_phi_age = 0
)
tmb_int$par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(mf$Z$X_tips_dummy)),
# beta_urban_dummy = rep(0, ncol(X_urban_dummy)),
u_tips = rep(0, ncol(mf$Z$$Z_tips)),
log_prec_rw_tips = 0,
u_age = rep(0, ncol(mf$Z$$Z_age)),
log_prec_rw_age = 0,
u_country = rep(0, ncol(mf$Z$$Z_country)),
log_prec_country = 0,
omega1 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_age))),
log_prec_omega1 = 0,
lag_logit_omega1_phi_age = 0,
omega2 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_period))),
log_prec_omega2 = 0,
lag_logit_omega2_phi_period = 0,
u_period = rep(0, ncol(mf$Z$Z_period)),
log_prec_rw_period = 0,
u_spatial_str = rep(0, ncol(mf$Z$Z_spatial)),
log_prec_spatial = 0,
eta1 = array(0, c(ncol(mf$Z$Z_country), ncol(mf$Z$Z_period), ncol(mf$Z$Z_age))),
log_prec_eta1 = 0,
lag_logit_eta1_phi_age = 0,
lag_logit_eta1_phi_period = 0,
#
eta2 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_period))),
log_prec_eta2 = 0,
lag_logit_eta2_phi_period = 0,
#
eta3 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_age))),
log_prec_eta3 = 0,
lag_logit_eta3_phi_age = 0
)
tmb_int$par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(mf$Z$X_tips_dummy)),
# beta_urban_dummy = rep(0, ncol(X_urban_dummy)),
u_tips = rep(0, ncol(mf$Z$$Z_tips)),
log_prec_rw_tips = 0,
u_age = rep(0, ncol(mf$Z$Z_age)),
log_prec_rw_age = 0,
u_country = rep(0, ncol(mf$Z$Z_country)),
log_prec_country = 0,
omega1 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_age))),
log_prec_omega1 = 0,
lag_logit_omega1_phi_age = 0,
omega2 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_period))),
log_prec_omega2 = 0,
lag_logit_omega2_phi_period = 0,
u_period = rep(0, ncol(mf$Z$Z_period)),
log_prec_rw_period = 0,
u_spatial_str = rep(0, ncol(mf$Z$Z_spatial)),
log_prec_spatial = 0,
eta1 = array(0, c(ncol(mf$Z$Z_country), ncol(mf$Z$Z_period), ncol(mf$Z$Z_age))),
log_prec_eta1 = 0,
lag_logit_eta1_phi_age = 0,
lag_logit_eta1_phi_period = 0,
#
eta2 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_period))),
log_prec_eta2 = 0,
lag_logit_eta2_phi_period = 0,
#
eta3 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_age))),
log_prec_eta3 = 0,
lag_logit_eta3_phi_age = 0
)
tmb_int$par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(mf$Z$X_tips_dummy)),
# beta_urban_dummy = rep(0, ncol(X_urban_dummy)),
u_tips = rep(0, ncol(mf$Z$Z_tips)),
log_prec_rw_tips = 0,
u_age = rep(0, ncol(mf$Z$Z_age)),
log_prec_rw_age = 0,
u_country = rep(0, ncol(mf$Z$Z_country)),
log_prec_country = 0,
omega1 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_age))),
log_prec_omega1 = 0,
lag_logit_omega1_phi_age = 0,
omega2 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_period))),
log_prec_omega2 = 0,
lag_logit_omega2_phi_period = 0,
u_period = rep(0, ncol(mf$Z$Z_period)),
log_prec_rw_period = 0,
u_spatial_str = rep(0, ncol(mf$Z$Z_spatial)),
log_prec_spatial = 0,
eta1 = array(0, c(ncol(mf$Z$Z_country), ncol(mf$Z$Z_period), ncol(mf$Z$Z_age))),
log_prec_eta1 = 0,
lag_logit_eta1_phi_age = 0,
lag_logit_eta1_phi_period = 0,
#
eta2 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_period))),
log_prec_eta2 = 0,
lag_logit_eta2_phi_period = 0,
#
eta3 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_age))),
log_prec_eta3 = 0,
lag_logit_eta3_phi_age = 0
)
devtools::load_all("~/Documents/GitHub/dfertility/")
mf <- make_model_frames(iso3_c, population, asfr, mics_asfr, areas, project=2020)
tmb_int <- list()
tmb_int$data <- list(M_obs = mf$district$M_obs,
X_tips_dummy = mf$Z$X_tips_dummy,
X_urban_dummy = mf$Z$X_urban_dummy,
X_extract_dhs = mf$X_extract$X_extract_dhs,
X_extract_ais = mf$X_extract$X_extract_ais,
Z_tips = mf$Z$Z_tips,
Z_tips_dhs = mf$Z$Z_tips_dhs,
Z_age = mf$Z$Z_age,
Z_period = mf$Z$Z_period,
Z_spatial = mf$Z$Z_spatial,
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf$mf_model),
Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf$mf_model),
Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf$mf_model),
Z_country = mf$Z$Z_country,
Z_omega1 = sparse.model.matrix(~0 + id.omega1, mf$mf_model),
Z_omega2 = sparse.model.matrix(~0 + id.omega2, mf$mf_model),
R_tips = mf$R$R_tips,
R_age = mf$R$R_age,
R_period = mf$R$R_period,
R_spatial = mf$R$R_spatial,
R_country = mf$R$R_country,
rankdef_R_spatial = 1,
log_offset_dhs = log(filter(mf$district$obs, ais_dummy ==0)$pys),
births_obs_dhs = filter(mf$district$obs, ais_dummy ==0)$births,
log_offset_ais = log(filter(mf$district$obs, ais_dummy ==1)$pys),
births_obs_ais = filter(mf$district$obs, ais_dummy ==1)$births,
pop = mf$mf_model$population,
A_asfr_out = mf$out$A_asfr_out,
A_tfr_out = mf$out$A_tfr_out,
mics_toggle = mf$mics_toggle,
out_toggle = mf$out_toggle
)
tmb_int$par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(mf$Z$X_tips_dummy)),
# beta_urban_dummy = rep(0, ncol(X_urban_dummy)),
u_tips = rep(0, ncol(mf$Z$Z_tips)),
log_prec_rw_tips = 0,
u_age = rep(0, ncol(mf$Z$Z_age)),
log_prec_rw_age = 0,
u_country = rep(0, ncol(mf$Z$Z_country)),
log_prec_country = 0,
omega1 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_age))),
log_prec_omega1 = 0,
lag_logit_omega1_phi_age = 0,
omega2 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_period))),
log_prec_omega2 = 0,
lag_logit_omega2_phi_period = 0,
u_period = rep(0, ncol(mf$Z$Z_period)),
log_prec_rw_period = 0,
u_spatial_str = rep(0, ncol(mf$Z$Z_spatial)),
log_prec_spatial = 0,
eta1 = array(0, c(ncol(mf$Z$Z_country), ncol(mf$Z$Z_period), ncol(mf$Z$Z_age))),
log_prec_eta1 = 0,
lag_logit_eta1_phi_age = 0,
lag_logit_eta1_phi_period = 0,
#
eta2 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_period))),
log_prec_eta2 = 0,
lag_logit_eta2_phi_period = 0,
#
eta3 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_age))),
log_prec_eta3 = 0,
lag_logit_eta3_phi_age = 0
)
tmb_int$random <- c("beta_0", "u_spatial_str", "u_age", "u_period", "beta_tips_dummy", "u_tips", "eta1", "eta2", "eta3", "omega1", "omega2")
if(mf$mics_toggle) {
tmb_int$data <- c(tmb_int$data,
"M_obs_mics" = mf$mics$M_obs_mics,
"Z_tips_mics" = mf$mics$Z$Z_tips_mics,
"R_tips_mics" = mf$mics$R$R_tips_mics,
"births_obs_mics" = list(mf$mics$obs$births),
"log_offset_mics" = list(log(mf$mics$obs$pys)),
"A_mics" = mf$mics$A_mics)
tmb_int$par <- c(tmb_int$par,
"u_tips_mics" = list(rep(0, ncol(mf$mics$Z$Z_tips_mics)))
)
}
tmb_int$data <- c(tmb_int$data,
"M_obs_mics" = mf$mics$M_obs_mics,
"Z_tips_mics" = mf$Z$Z_tips_mics,
"R_tips_mics" = mf$R$R_tips_mics,
"births_obs_mics" = list(mf$mics$obs$births),
"log_offset_mics" = list(log(mf$mics$obs$pys)),
"A_mics" = mf$mics$A_mics)
tmb_int$par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(mf$Z$X_tips_dummy)),
# beta_urban_dummy = rep(0, ncol(X_urban_dummy)),
u_tips = rep(0, ncol(mf$Z$Z_tips)),
log_prec_rw_tips = 0,
u_age = rep(0, ncol(mf$Z$Z_age)),
log_prec_rw_age = 0,
u_country = rep(0, ncol(mf$Z$Z_country)),
log_prec_country = 0,
omega1 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_age))),
log_prec_omega1 = 0,
lag_logit_omega1_phi_age = 0,
omega2 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_period))),
log_prec_omega2 = 0,
lag_logit_omega2_phi_period = 0,
u_period = rep(0, ncol(mf$Z$Z_period)),
log_prec_rw_period = 0,
u_spatial_str = rep(0, ncol(mf$Z$Z_spatial)),
log_prec_spatial = 0,
eta1 = array(0, c(ncol(mf$Z$Z_country), ncol(mf$Z$Z_period), ncol(mf$Z$Z_age))),
log_prec_eta1 = 0,
lag_logit_eta1_phi_age = 0,
lag_logit_eta1_phi_period = 0,
#
eta2 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_period))),
log_prec_eta2 = 0,
lag_logit_eta2_phi_period = 0,
#
eta3 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_age))),
log_prec_eta3 = 0,
lag_logit_eta3_phi_age = 0
)
tmb_int$random <- c("beta_0", "u_spatial_str", "u_age", "u_period", "beta_tips_dummy", "u_tips", "eta1", "eta2", "eta3", "omega1", "omega2")
tmb_int$data <- c(tmb_int$data,
"M_obs_mics" = mf$mics$M_obs_mics,
"Z_tips_mics" = mf$Z$Z_tips_mics,
"R_tips_mics" = mf$R$R_tips_mics,
"births_obs_mics" = list(mf$mics$obs$births),
"log_offset_mics" = list(log(mf$mics$obs$pys)),
"A_mics" = mf$mics$A_mics)
tmb_int$par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(mf$Z$X_tips_dummy)),
# beta_urban_dummy = rep(0, ncol(X_urban_dummy)),
u_tips = rep(0, ncol(mf$Z$Z_tips)),
log_prec_rw_tips = 0,
u_age = rep(0, ncol(mf$Z$Z_age)),
log_prec_rw_age = 0,
u_country = rep(0, ncol(mf$Z$Z_country)),
log_prec_country = 0,
omega1 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_age))),
log_prec_omega1 = 0,
lag_logit_omega1_phi_age = 0,
omega2 = array(0, c(ncol(mf$R$R_country), ncol(mf$Z$Z_period))),
log_prec_omega2 = 0,
lag_logit_omega2_phi_period = 0,
u_period = rep(0, ncol(mf$Z$Z_period)),
log_prec_rw_period = 0,
u_spatial_str = rep(0, ncol(mf$Z$Z_spatial)),
log_prec_spatial = 0,
eta1 = array(0, c(ncol(mf$Z$Z_country), ncol(mf$Z$Z_period), ncol(mf$Z$Z_age))),
log_prec_eta1 = 0,
lag_logit_eta1_phi_age = 0,
lag_logit_eta1_phi_period = 0,
#
eta2 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_period))),
log_prec_eta2 = 0,
lag_logit_eta2_phi_period = 0,
#
eta3 = array(0, c(ncol(mf$Z$Z_spatial), ncol(mf$Z$Z_age))),
log_prec_eta3 = 0,
lag_logit_eta3_phi_age = 0
)
tmb_int$random <- c("beta_0", "u_spatial_str", "u_age", "u_period", "beta_tips_dummy", "u_tips", "eta1", "eta2", "eta3", "omega1", "omega2")
if(mf$mics_toggle) {
tmb_int$data <- c(tmb_int$data,
"M_obs_mics" = mf$mics$M_obs_mics,
"Z_tips_mics" = mf$Z$Z_tips_mics,
"R_tips_mics" = mf$R$R_tips_mics,
"births_obs_mics" = list(mf$mics$obs$births),
"log_offset_mics" = list(log(mf$mics$obs$pys)),
"A_mics" = mf$mics$A_mics)
tmb_int$par <- c(tmb_int$par,
"u_tips_mics" = list(rep(0, ncol(mf$Z$Z_tips_mics)))
)
}
if(iso3_c == "ETH") {
tmb_int$par <- c(tmb_int$par,
"beta_urban_dummy" = rep(0, ncol(mf$Z$X_urban_dummy))
)
}
f <- mcparallel({TMB::MakeADFun(data = tmb_int$data,
parameters = tmb_int$par,
DLL = "tmb",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
